#ifndef __SCOPED_ARRAY_HPP__
#define __SCOPED_ARRAY_HPP__

#include <iostream>
using namespace std;
#include <cassert>

template <typename T>
class ScopedArray
{
public:
	ScopedArray(T* ptr = NULL);
	~ScopedArray();
	T& operator[](const size_t index)const;
protected:
	ScopedArray(const ScopedArray<T>& ap);
	ScopedArray<T>& operator=(const ScopedArray<T>& ap);
protected:
	T* _ptr;
};

template <typename T>
ScopedArray<T>::ScopedArray(T* ptr) :_ptr(ptr)
{}

template <typename T>
ScopedArray<T>::~ScopedArray()
{
	if (_ptr)
	{
		delete[] _ptr;
	}
}

template <typename T>
T& ScopedArray<T>::operator[](const size_t index)const
{
	return _ptr[index];
}

#endif /*__SCOPED_ARRAY_HPP__*/
