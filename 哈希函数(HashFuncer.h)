#pragma once
#ifndef __HASHFUNCER_H__
#define __HASHFUNCER_H__

#include <string>

size_t GetPrimeSize(size_t size)
{
	static const unsigned long _PrimeList[] =
	{
		3ul,53ul, 97ul, 193ul, 389ul, 769ul,
		1543ul, 3079ul, 6151ul, 12289ul, 24593ul,
		49157ul, 98317ul, 196613ul, 393241ul, 786433ul,
		1572869ul, 3145739ul, 6291469ul, 12582917ul, 25165843ul,
		50331653ul, 100663319ul, 201326611ul, 402653189ul, 805306457ul,
		1610612741ul, 3221225473ul, 4294967291ul
	};
	int _PrimeSize = sizeof(_PrimeList) / sizeof(_PrimeList[0]);
	for (size_t i = 0; i < _PrimeSize; i++)
	{
		if (_PrimeList[i] > size)
		{
			return _PrimeList[i];
		}
		if (_PrimeList[_PrimeSize] == size)
			return _PrimeList[_PrimeSize - 1];
	}
	return _PrimeList[_PrimeSize - 1];
}

template <class K>
struct __HashFuncer1
{
	size_t operator()(const K& key)
	{
		return key;
	}
};
template <>
struct __HashFuncer1<std::string>
{
	size_t BKDRHash(const char *str)
	{
		register size_t hash = 0;
		while (size_t ch = (size_t)*str++)
		{
			hash = hash * 131 + ch;   // 也可以乘以31、131、1313、13131、131313..         
		}
		return hash;
	}
	size_t operator()(const std::string& key)
	{
		return BKDRHash(key.c_str());
	}
};

template <class K>
struct __HashFuncer2
{
	size_t operator()(const K& key)
	{
		return key;
	}
};
template <>
struct __HashFuncer2<std::string>
{
	size_t SDBMHash(const char *str)
	{
		register size_t hash = 0;
		while (size_t ch = (size_t)*str++)
		{
			hash = 65599 * hash + ch;
			//hash = (size_t)ch + (hash << 6) + (hash << 16) - hash;  
		}
		return hash;
	}
	size_t operator()(const std::string& key)
	{
		return SDBMHash(key.c_str());
	}
};

template <class K>
struct __HashFuncer3
{
	size_t operator()(const K& key)
	{
		return key;
	}
};
template <>
struct __HashFuncer3<std::string>
{
	size_t RSHash(const char *str)
	{
		register size_t hash = 0;
		size_t magic = 63689;
		while (size_t ch = (size_t)*str++)
		{
			hash = hash * magic + ch;
			magic *= 378551;
		}
		return hash;
	}
	size_t operator()(const std::string& key)
	{
		return RSHash(key.c_str());
	}
};

template <class K>
struct __HashFuncer4
{
	size_t operator()(const K& key)
	{
		return key;
	}
};
template <>
struct __HashFuncer4<std::string>
{
	size_t APHash(const char *str)
	{
		register size_t hash = 0;
		size_t ch;
		for (long i = 0; ch = (size_t)*str++; i++)
		{
			if ((i & 1) == 0)
			{
				hash ^= ((hash << 7) ^ ch ^ (hash >> 3));
			}
			else
			{
				hash ^= (~((hash << 11) ^ ch ^ (hash >> 5)));
			}
		}
		return hash;
	}
	size_t operator()(const std::string& key)
	{
		return APHash(key.c_str());
	}
};

template <class K>
struct __HashFuncer5
{
	size_t operator()(const K& key)
	{
		return key;
	}
};
template <>
struct __HashFuncer5<std::string>
{
	size_t JSHash(const char *str)
	{
		if (!*str)        // 这是由本人添加，以保证空字符串返回哈希值0  
			return 0;
		register size_t hash = 1315423911;
		while (size_t ch = (size_t)*str++)
		{
			hash ^= ((hash << 5) + ch + (hash >> 2));
		}
		return hash;
	}
	size_t operator()(const std::string& key)
	{
		return JSHash(key.c_str());
	}
};

#endif /*__HASHFUNCER_H__*/
