#pragma once
#ifndef __BINARYTREE_THREADED_H__
#define __BINARYTREE_THREADED_H__

#include <iostream>
#include <assert.h>

enum PointerTag
{
	THREAD,
	LINK,
};

template <typename T>
struct BinaryTreeNodeThd
{
	T _data;
	BinaryTreeNodeThd<T>* _left;
	BinaryTreeNodeThd<T>* _right;
	PointerTag _leftTag;
	PointerTag _rightTag;

	BinaryTreeNodeThd()
	{}

	BinaryTreeNodeThd(const T& data, PointerTag leftTag = LINK, 
						PointerTag rightTag = LINK)
		:_data(data), _left(NULL), _right(NULL), 
		_leftTag(leftTag), _rightTag(rightTag)
	{}
};

template <typename T>
class BinaryTreeThd
{
	typedef BinaryTreeNodeThd<T> Node;

public:
	BinaryTreeThd();
	BinaryTreeThd(const T* array, const size_t& size, const T& invalid);
	~BinaryTreeThd();

	void PrevOrder()const;
	void InOrder()const;
	void PostOrder()const;

	void PrevTheaded();
	void InThreaded();
	void PostThreaded();

protected:
	static BinaryTreeNodeThd<T>* _CreateTree(const T* array, const size_t& size, 
							const T& invalid, size_t& index);

	static void _Destory(Node* root);

	static void _PrevOrder(Node* root);
	static void _InOrder(Node* root);
	static void _PostOrder(Node* root);

	static void _PrevThreaded(Node* root, Node* &prev);
	static void _InThreaded(Node* root, Node* &prev);
	static void _PostThreaded(Node* root, Node* &prev);
protected:
	Node* _root;
};

#endif /*__BINARYTREE_THREADED_H__*/
