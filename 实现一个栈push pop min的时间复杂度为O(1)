//.h文件
template <typename T>
class StackMin
{
public:
	StackMin();
	~StackMin();
	void Push(const T& x);
	void Pop();
	const T& Min()const;
protected:
	std::stack<T> _data;
	std::stack<T> _min;
};

//.hpp文件
template <typename T>
StackMin<T>::StackMin()
{}
template <typename T>
StackMin<T>::~StackMin()
{}
template <typename T>
void StackMin<T>::Push(const T& x)
{
	this->_data.push(x);
	if (this->_min.empty() || this->_min.top() > x)
	{
		this->_min.push(x);
	}
	else
	{
		this->_min.push(this->_min.top());
	}
}
template <typename T>
void StackMin<T>::Pop()
{
	assert(this->_data.empty() && this->_min.empty());
	this->_data.pop();
	this->_min.pop();
}
template <typename T>
const T& StackMin<T>::Min()const
{
	assert(this->_data.empty() && this->_min.empty());
	return this->_min.top();
}
