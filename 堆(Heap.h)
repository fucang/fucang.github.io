#pragma once
#ifndef __HEAP_H__
#define __HEAP_H__

#include <iostream>
#include <assert.h>
#include <vector>

template <typename T>
class Heap
{
	friend std::ostream& operator<<<T>(std::ostream& out, const Heap<T>& heap);

public:
	Heap();
	Heap(const T* array, size_t size);
	Heap(const Heap<T>& heap);
	Heap<T>& operator=(const Heap<T>& heap);
	~Heap();

	void Push(const T& x);
	void Pop();
	T GetTop()const;
	bool Empty()const;
	size_t size()const;

protected:
	void _AdjustDown(size_t parent);
	void _AdjustUp(size_t pos);

protected:
	std::vector<T> _array;
};

template <typename T>
std::ostream& operator<<(std::ostream& out, const Heap<T>& heap);

//堆排序
template <typename T>
void HeapSort(T* array, size_t size);

#endif /*__HEAP_H__*/
