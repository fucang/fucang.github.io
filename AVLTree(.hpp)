#define _CRT_SECURE_NO_WARNINGS 1

#include "AVLTree.h"
#include <stack>

template <typename K,typename V>
AVLTree<K, V>::AVLTree() :_root(NULL)
{}

template <typename K, typename V>
bool AVLTree<K, V>::Insert(const K& key, const V& value = V())
{
	//_root == NULL
	if (this->_root == NULL)
	{
		this->_root = new Node(key, value);
		return true;
	}
	Node* parent = NULL;
	Node* cur = this->_root;
	while (cur)
	{
		if (key < cur->_key)
		{
			parent = cur;
			cur = cur->_left;
		}
		else if (key > cur->_key)
		{
			parent = cur;
			cur = cur->_right;
		}
		else
		{
			return false;//数据已存在
		}
	}
	Node* tmp = NULL;
	//插入结点
	if (key < parent->_key)
	{
		tmp = new Node(key, value);
		parent->_left = tmp;
		tmp->_parent = parent;
		cur = parent;
	}
	else
	{
		tmp = new Node(key, value);
		parent->_right = tmp;
		tmp->_parent = parent;
		cur = parent;
	}
	//修改平衡因子
	while (parent != NULL)
	{
		if (tmp == parent->_right)
			++parent->_bf;
		else
			--parent->_bf;

		if (parent->_bf != 1 && parent->_bf != -1)
			break;
		tmp = parent;
		parent = parent->_parent;
	}
	bool flag = false;
	parent = cur;
	while (parent && (parent->_bf >= 1 || parent->_bf <= -1))//因为可能导致父结点不满足要求
	{		
		Node* ppNode = parent->_parent;
		if (parent->_bf == 2) //右子树的深度至少为2，所以右子结点肯定不为空
		{
			if (parent->_right->_bf >= 0) //左单旋
			{
				this->_RotateL(parent);
			}
			else //右左单旋
			{
				this->_RotateRL(parent);
			}
			flag = true;
		}
		else if(parent->_bf == -2)//左子树的深度至少为2，所以左子结点肯定不为空
		{
			if (parent->_left->_bf <= 0) //左单旋
			{
				this->_RotateR(parent);
			}
			else //右左单旋
			{
				this->_RotateLR(parent);
			}	
			flag = true;
		}
		if (flag)
		{		
			if (ppNode == NULL)
			{
				this->_root = parent;
			}
			else
			{
				if (parent->_key < ppNode->_key)
				{
					ppNode->_left = parent;
				}
				else
				{
					ppNode->_right = parent;
				}
			}
		}
		flag = false;
		parent = parent->_parent;

	}/*while*/
	return true;
}
template <typename K,typename V>
void AVLTree<K, V>::_RotateL(Node* &parent)
{
	Node* subR = parent->_right;
	Node* subRL = subR->_left;//可能为空

	subR->_parent = parent->_parent;
	subR->_left = parent;
	parent->_parent = subR;

	parent->_right = subRL;
	if (subRL != NULL)
	{
		subRL->_parent = parent;
	}
	parent->_bf = subR->_bf = 0;
	parent = subR;
}

template <typename K, typename V>
void AVLTree<K, V>::_RotateR(Node* &parent)
{
	Node* subL = parent->_left;
	Node* subLR = subL->_right;

	subL->_parent = parent->_parent;
	subL->_right = parent;
	parent->_parent = subL;
	parent->_left = subLR;
	if (subLR)
	{
		subLR->_parent = parent;
	}
	parent->_bf = subL->_bf = 0;
	parent = subL;
}

template <typename K, typename V>
void AVLTree<K, V>::_RotateLR(Node* &parent)
{
	Node* pNode = parent;
	Node* subLNode = parent->_left;
	Node* subLRNode = subLNode->_right;
	int bf = subLRNode->_bf;
	_RotateL(parent->_left);
	_RotateR(parent);
	if (bf == -1)
	{
		pNode->_bf = 1;
		subLNode->_bf = 0;
	}
	else if (bf == 1)
	{
		pNode->_bf = 0;
		subLNode->_bf = -1;
	}
	else
	{
		pNode->_bf = 0;
		subLNode->_bf = 0;
	}
}

template <typename K, typename V>
void AVLTree<K, V>::_RotateRL(Node* &parent)
{
	Node* pNode = parent;
	Node* subRNode = parent->_right;
	Node* subRLNode = subRNode->_left;
	int bf = subRLNode->_bf;
	_RotateR(parent->_right);
	_RotateL(parent); //因为parent->_left->_right可能为空，但在上面却把_bf全弄为了0
	if (bf == -1)
	{
		pNode->_bf = 0;
		subRNode->_bf = 1;
	}
	else if (bf == 1)
	{
		pNode->_bf = -1;
		subRNode->_bf = 0;
	}
	else
	{
		pNode->_bf = 0;
		subRNode->_bf = 0;
	}
}

template <typename K, typename V>
bool AVLTree<K, V>::IsBalance()
{
	return _IsBalance(this->_root);
}

template <typename K, typename V>
bool AVLTree<K, V>::_IsBalance(AVLTreeNode<K,V>* root)
{
	if (root == NULL)
		return true;
	int left = _Heigh(root->_left);
	int right = _Heigh(root->_right);
	int bf = right - left;
	if (bf != root->_bf)
	{
		cout << root->_key << "不平衡" << endl;
	}
	return (bf == root->_bf) && (abs(bf) <= 1) && 
		_IsBalance(root->_left) && _IsBalance(root->_right);
}

template <typename K, typename V>
int AVLTree<K, V>::_Heigh(Node* root)
{
	if (root == NULL)
		return 0;
	int left = _Heigh(root->_left);
	int right = _Heigh(root->_right);
	return left > right ? left + 1 : right + 1;
}

template <typename K, typename V>
void AVLTree<K, V>::InOrder()
{
	Node* cur = this->_root;
	stack<Node*> s;
	while (!s.empty() || cur)
	{
		if (cur)
		{
			s.push(cur);
			cur = cur->_left;
		}
		else
		{
			Node* tmp = s.top();
			cout << tmp->_key << " ";
			s.pop();
			cur = tmp->_right;
		}
	}
	cout << endl;
}

//test.cpp
#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
using namespace std;

#include "AVLTree.hpp"

void test()
{
	int array[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };

	AVLTree<int, int> tree;
	bool balance = false;
	for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i)
	{
		tree.Insert(array[i], i);
		balance = tree.IsBalance();
		if (!balance)
		{
			cout << array[i] << "不平衡" << endl;
			break;
		}
	}
	cout << "这棵树平衡？" << balance << endl;
	tree.InOrder();
}

int main()
{
	test();
	system("pause");
	return 0;
}
