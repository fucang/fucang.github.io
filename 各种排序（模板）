#pragma once
#ifndef __SORT_H__
#define __SORT_H__

#include <stack>
#include <cassert>

template <typename T>
struct Less
{
	bool operator()(const T& left, const T& right)
	{
		return left < right;
	}
};
template <typename T>
struct Greater
{
	bool operator()(const T& left, const T& right)
	{
		return left > right;
	}
};
template <typename T>
struct Equal
{
	bool operator()(const T& left, const T& right)
	{
		return left == right;
	}
};
template <typename T>
void PrintArray(T* array, size_t size)
{
	assert(array);
	for (size_t i = 0; i < size; ++i)
	{
		cout << array[i] << " ";
	}
	cout << endl;
}

//直接插入排序
template <typename T, class Compare = Greater<T>>
void InsertSort(T* array, size_t size)
{
	assert(array);
	for (int index = 1; index < size; ++index)
	{
		T tmp = array[index];
		int end = index - 1;
		while (end >= 0 && Compare()(array[end], tmp))
		{
			array[end + 1] = array[end];
			--end;
		}
		array[end + 1] = tmp;
	}
}

//希尔排序
template <typename T,class Compare = Greater<T>>
void ShellSort(T* array, size_t size)
{
	assert(array);
	//以gap为间距,gap=size/3+1,加1是为了保证最后一次的间距为1
	int gap = size;
	while (gap > 1)
	{
		gap = gap / 3 + 1;
		//处理第index个元素
		for (int index = 1; index < size; ++index)
		{
			//类同直接插入排序
			int end = index - gap;
			int tmp = array[index];
			while (end >= 0 && Compare()(array[end], tmp))
			{
				array[end + gap] = array[end];
				end -= gap;
			}
			array[end + gap] = tmp;
		}
	}
}

//选择排序
template <typename T,class Compare = Greater<T>>
void SelectSort(T* array, size_t size)
{
	assert(array);
	for (int i = 0; i < size/2; ++i)
	{
		int max = i;
		int min = i;
		for (int j = i + 1; j < size - i; ++j)
		{
			if (Compare()(array[j], array[max]))
			{
				max = j;
			}
			if (Compare()(array[min], array[j]))
			{
				min = j;
			}
		}
		if (min != i)
		{
			swap(array[min], array[i]);
			if (max == i)
			{
				swap(array[min], array[size - 1 - i]);
			}
		}
		if (max != i)
		{
			swap(array[max], array[size - 1 - i]);
		}
	}
}

//堆排序
template <typename T,class Compare = Greater<T>>
void AdjustDown(T* array, size_t size, size_t parent = 0)
{
	assert(array);
	size_t child = 2 * parent + 1;
	while (child < size)
	{
		if (child + 1 < size && Compare()(array[child + 1], array[child]))
		{
			++child;
		}
		if (Compare()(array[child], array[parent]))
		{
			swap(array[parent], array[child]);
			parent = child;
			child = 2 * parent + 1;
		}
		else
		{
			break;
		}
	}
}
template <typename T,class Compare = Greater<T>>
void HeapSort(T* array, size_t size)
{
	assert(array);
	//建初堆
	for (int i = (size - 2) / 2; i >= 0; --i)
	{
		AdjustDown<T,Compare>(array, size, i);
	}
	//向下调整
	for (size_t i = 0; i < size; ++i)
	{
		swap(array[0], array[size - 1 - i]);
		AdjustDown<T, Compare>(array, size - 1 - i, 0);
	}
}

//冒泡排序
template <typename T,class Compare = Greater<T>>
void BubbleSort(T* array, size_t size)
{
	assert(array);
	bool flag = true;
	for (size_t i = 0; flag && i < size - 1; ++i)
	{
		flag = false;
		for (size_t j = 0; j < size - 1 - i; ++j)
		{
			if (Compare()(array[j], array[j + 1]))
			{
				flag = true;
				swap(array[j], array[j + 1]);
			}
		}
	}
}

//快速排序
template <typename T, class Compare = Greater<T>, class Compare2 = Equal<T>>
int OneQuickSort(T* array, int left, int right) //一趟快排
{
	int low = left;
	int high = right;
	int tmp = array[right];
	while (low < high)
	{
		//从左找第一个比tmp小的
		while (low < high && (Compare()(tmp, array[low]) || Compare2()(tmp, array[low])))
		{
			++low;
		}
		if (low < high)
		{
			array[high] = array[low];
			--high;
		}
		while (low < high && (Compare()(array[high], tmp) || Compare2()(array[high], tmp)))//从右找第一个比tmp大的
		{
			--high;
		}
		if (low < high)
		{
			array[low] = array[high];
			++low;
		}
	}
	array[low] = tmp;
	return low;
}
template <typename T>
int GetIndexMid(T* array, int left, int right)
{
	//在left，right，mid中间选择中间大小的
	int mid = left - (left - right) / 2;
	if (array[left] < array[mid])
	{	
		if (array[mid] < array[right]) return mid; //left < mid < right	
		else if (array[left] < array[right]) return right; //left < right < mid		
		else return left; //right < left < mid
	}
	else //mid <= left
	{
		if (array[left] < array[right]) return left; //mid < left < right
		else if (array[right] < array[mid]) return mid; //right < mid <left
		else return right; //mid < right < left 
	}
}
template <typename T, class Compare = Greater<T>, class Compare2 = Equal<T>>
void QuickSort(T* array, int left, int right)
{
	assert(array);
	if (right - left < 13)//如果数组比较小，直接采取插入排序
	{
		InsertSort<T,Compare>(array + left, right - left + 1);
	}
	else if (left < right)
	{
		swap(array[right], array[GetIndexMid(array, left, right)]);
		int pos = OneQuickSort<T, Compare, Compare2>(array, left, right);
		QuickSort<T,Compare,Compare2>(array, left, pos - 1);
		QuickSort<T, Compare, Compare2>(array, pos + 1, right);
	}
}
template <typename T, class Compare = Greater<T>, class Compare2 = Equal<T>>
void QuickSort_NoR(T* array, int begin, int end)//非递归
{
	assert(array);
	stack<int> s;
	s.push(end);
	s.push(begin);
	while (!s.empty())
	{
		int left = s.top(); 
		s.pop();
		int right = s.top(); 
		s.pop();
		if (right - left < 13)//如果数组比较小，直接采取插入排序
		{
			InsertSort<T,Compare>(array + left, right - left + 1);
		}
		else if (left < right)
		{
			int pos = OneQuickSort<T,Compare,Compare2>(array, left, right);
			if (left < pos - 1)
			{
				s.push(pos - 1);
				s.push(left);
			}
			if (right > pos + 1)
			{
				s.push(right);
				s.push(pos + 1);
			}
		}
	}
}

//归并排序
template <typename T, class Compare = Greater<T>>
void Merge(T* array, T* tmp, int left1, int right1, int left2, int right2)
{
	int index = left1;
	while (left1 <= right1 && left2 <= right2)
	{
		if (Compare()(array[left2], array[left1]))
		{
			tmp[index++] = array[left1++];
		}
		else
		{
			tmp[index++] = array[left2++];
		}
	}
	while (left1 <= right1)
	{
		tmp[index++] = array[left1++];
	}
	while (left2 <= right2)
	{
		tmp[index++] = array[left2++];
	}
}
template <typename T, class Compare = Greater<T>>
void MergeSt(T* array, T* tmp, int left, int right)
{
	assert(array);
	if (left < right)
	{
		int mid = left - (left - right) / 2;
		MergeSt<T,Compare>(array, tmp, left, mid); // 左
		MergeSt<T, Compare>(array, tmp, mid + 1, right);// 右
		Merge<T, Compare>(array, tmp, left, mid, mid + 1, right);//合并
		//拷回去
		for (int i = left; i <= right; ++i)
		{
			array[i] = tmp[i];
		}
	}
}
template <typename T,class Compare = Greater<T>>
void MergeSort(T* array, size_t size)
{
	assert(array);
	T* tmp = new T[size];

	MergeSt<T, Compare>(array, tmp, 0, size - 1);

	delete[] tmp;
}

#endif /*__SORT_H__*/

//test
#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
using namespace std;

#include "Sort.h"

void testInsertSort()
{
	int array[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };
	InsertSort<int,Less<int>>(array, sizeof(array) / sizeof(array[0]));
	cout << "InsertSort->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}

void testShellSort()
{
	int array[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };
	ShellSort<int, Less<int>>(array, sizeof(array) / sizeof(array[0]));
	cout << "ShellSort->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}

void testSelectSort()
{
	int array[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };
	SelectSort<int, Less<int>>(array, sizeof(array) / sizeof(array[0]));
	cout << "SelectSort->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}

void testHeapSort()
{
	int array[] = { 2, 5, 4, 9, 3, 6, 8, 7, 1, 0 };
	HeapSort<int, Less<int>>(array, sizeof(array) / sizeof(array[0]));
	cout << "HeapSort->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}

void testBubbleSort()
{
	int array[] = { 54, 35, 48, 36, 27, 12, 44, 44, 8, 14, 26, 17, 28 };
	BubbleSort<int, Less<int>>(array, sizeof(array) / sizeof(array[0]));
	cout << "BubbleSort->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}

void testQuickSort()
{
	int array[] = { 5, 5, 4, 5, 3, 5, 8,5, 1, 5 ,26, 5, 28, 5, 9, 5 };
	QuickSort_NoR<int, Less<int>>(array, 0, sizeof(array) / sizeof(array[0]) - 1);
	cout << "QuickSort_NoR->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}
void testMergeSort()
{
	int array[] = { 5, 5, 4, 5, 3, 5, 8, 5, 1, 5, 26, 5, 28, 5, 9, 5 };
	MergeSort<int, Less<int>>(array, sizeof(array) / sizeof(array[0]));
	cout << "MergeSort->: ";
	PrintArray(array, sizeof(array) / sizeof(array[0]));
}
int main()
{
	testInsertSort();
	testShellSort();
	testSelectSort();
	testHeapSort();
	testBubbleSort();
	testQuickSort();
	testMergeSort();
	system("pause");
	return 0;
}
